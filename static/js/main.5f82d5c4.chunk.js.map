{"version":3,"sources":["components/Home.js","components/Navbar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","countWords","e","word","target","value","wordArray","replace","split","wordArrayCount","filter","str","length","trim","setState","count","words","wordsArray","keywordDensity","keyword","state","subStr","console","log","match","RegExp","density","className","this","rows","onChange","name","placeholder","type","Component","Navbar","href","Footer","id","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PAkGeA,E,kDA/FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAUVC,WAAa,SAACC,GAEV,IAAIC,EAAOD,EAAEE,OAAOC,MAQdC,GAFNH,GADAA,GADAA,EAAOA,EAAKI,QAAQ,kBAAmB,KAC3BA,QAAQ,YAAa,MACrBA,QAAQ,MAAO,OAEJC,MAAM,KACzBC,EAAiBN,EAAKK,MAAM,KAAKE,QAAO,SAAUC,GAAO,MAAc,IAAPA,KAAcC,OAClFH,EAAiBN,EAAKU,OAAOL,MAAM,OAAOI,OAS1C,EAAKE,SAAS,CACVC,MAAON,EACPO,MAAOb,EACPc,WAAYX,KAnCD,EAuCnBY,eAAiB,SAAChB,GACd,IAAIiB,EAAUjB,EAAEE,OAAOC,MAAMQ,OAEzBG,EAAQ,EAAKI,MAAMJ,MAInBD,EAAQ,EACRM,EAASF,EAAQZ,QAAQ,sBAAuB,QAChDY,EAAQP,QAAU,EAClBG,EAAQC,EAAMJ,OAAS,GAEvBU,QAAQC,IAAIF,GACZN,EAAQC,EAAMQ,MAAM,IAAIC,OAAOJ,EAAQ,OAAS,IAAIT,OACpDU,QAAQC,IAAIR,GACZO,QAAQC,IAAIP,IAiBhB,IAAIU,EAAWX,EAAQ,EAAKK,MAAML,MAAS,IAC3C,EAAKD,SAAS,CACVY,QAASA,KAtEb,EAAKN,MAAQ,CACTH,WAAY,GACZD,MAAO,GACPD,MAAO,EACPG,eAAgB,IAPL,E,qDA+Ef,OACI,yBAAKS,UAAU,kBACX,uBAAGA,UAAU,cAAcC,KAAKR,MAAML,MAAtC,UADJ,IAC2D,6BACvD,yBAAKY,UAAU,cACX,8BAAUE,KAAK,KAAKC,SAAUF,KAAK3B,WAAY8B,KAAK,OAAOC,YAAY,oBACvE,yBAAKL,UAAU,iBACX,8CACA,2BAAOM,KAAK,OAAOD,YAAY,gBAAgBF,SAAUF,KAAKV,iBAC9D,uBAAGS,UAAU,WAAWC,KAAKR,MAAMM,gB,GAxFxCQ,aCiBJC,MAjBf,WACI,OACI,6BACI,6BACI,yBAAKR,UAAU,QACX,2CAEJ,wBAAIA,UAAU,aACV,4BAAI,uBAAGS,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,WAAR,gBCVT,SAASC,IACpB,OACI,yBAAKC,GAAG,UAAR,aCYOC,MAVf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACU,EAAD,QCCcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.5f82d5c4.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Home extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            wordsArray: [],\n            words: \"\",\n            count: 0,\n            keywordDensity: \"\"\n        }\n    }\n\n    countWords = (e) => {\n        //get the target value\n        let word = e.target.value\n        // word = word.replace(/â†µ/g, \"hghgh\");\n        //split the text to get number of words\n\n        word = word.replace(/(^\\s*)|(\\s*$)/gi, \"\");//exclude  start and end white-space\n        word = word.replace(/[ ]{2,}/gi, \" \");//2 or more space to 1\n        word = word.replace(/\\n /, \"\\n\"); // exclude newline with a start spacing\n\n        const wordArray = word.split(\" \")//returns an array of words\n        let wordArrayCount = word.split(' ').filter(function (str) { return str != \"\"; }).length;\n        wordArrayCount = word.trim().split(/\\s+/).length\n\n        try{\n            //wordArrayCount = word.match(/\\b\\S+\\b/g).length\n        }catch{\n\n        }\n        \n       // console.log(wordArray)\n        this.setState({\n            count: wordArrayCount,\n            words: word,\n            wordsArray: wordArray\n        })\n    }\n\n    keywordDensity = (e) => {\n        let keyword = e.target.value.trim()\n\n        let words = this.state.words\n        //let count = 0;\n        //var count = (wordArray.match(/df/g) || []).length;\n\n        let count = 0\n        let subStr = keyword.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n        if (keyword.length <= 0) {\n            count = words.length + 1;\n        }else{\n            console.log(subStr)\n            count = words.match(new RegExp(subStr, 'gi') || []).length\n            console.log(count)\n            console.log(words)\n        }\n        \n\n        //console.log(wordArray[2])\n        // wordArray.forEach(element => {\n        //     console.log(element)\n        //     //replace spaces in element\n        //     let newElement = element.replace(\" \",\"\")\n        //     let newKeyword = keyword.replace(\" \",\"\")\n        //     if (newElement.includes(newKeyword)) {\n        //         //console.log(element)\n        //         count += 1\n        //     }\n        // });\n\n        //calculate density\n        let density = (count / this.state.count) * 100\n        this.setState({\n            density: density\n        })\n    \n    }\n\n    render() {\n        return (\n            <div className=\"form-container\">\n                <p className=\"word-count\">{this.state.count} Words</p> <br></br>\n                <div className=\"word-stats\">\n                    <textarea rows=\"30\" onChange={this.countWords} name=\"text\" placeholder=\"enter text here\"></textarea>\n                    <div className=\"keyword-stats\">\n                        <p>Keyword density</p>\n                        <input type=\"text\" placeholder=\"enter keyword\" onChange={this.keywordDensity}></input>\n                        <p className=\"density\">{this.state.density}</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home","import React from 'react'\n\nfunction Navbar() {\n    return (\n        <div>\n            <nav>\n                <div className=\"logo\">\n                    <h2>Word Count</h2>\n                </div>\n                <ul className=\"nav-items\">\n                    <li><a href=\"#\">Home</a></li>\n                    <li><a href=\"#\">About</a></li>\n                    <li><a href=\"#footer\">Contact</a></li>\n                </ul>\n            </nav>\n        </div>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\n\nexport default function Footer() {\n    return (\n        <div id=\"footer\">\n          &copy; 2020\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Home/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}